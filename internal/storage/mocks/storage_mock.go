// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/storage.go -destination=internal/storage/mocks/storage_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/wickedv43/go-musthave-diploma-tpl/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataKeeper is a mock of DataKeeper interface.
type MockDataKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDataKeeperMockRecorder
	isgomock struct{}
}

// MockDataKeeperMockRecorder is the mock recorder for MockDataKeeper.
type MockDataKeeperMockRecorder struct {
	mock *MockDataKeeper
}

// NewMockDataKeeper creates a new mock instance.
func NewMockDataKeeper(ctrl *gomock.Controller) *MockDataKeeper {
	mock := &MockDataKeeper{ctrl: ctrl}
	mock.recorder = &MockDataKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataKeeper) EXPECT() *MockDataKeeperMockRecorder {
	return m.recorder
}

// AddToBalanceWithTX mocks base method.
func (m *MockDataKeeper) AddToBalanceWithTX(arg0 context.Context, arg1 int, arg2 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBalanceWithTX", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBalanceWithTX indicates an expected call of AddToBalanceWithTX.
func (mr *MockDataKeeperMockRecorder) AddToBalanceWithTX(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBalanceWithTX", reflect.TypeOf((*MockDataKeeper)(nil).AddToBalanceWithTX), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockDataKeeper) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataKeeperMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataKeeper)(nil).Close))
}

// CreateBill mocks base method.
func (m *MockDataKeeper) CreateBill(arg0 context.Context, arg1 storage.Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBill", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBill indicates an expected call of CreateBill.
func (mr *MockDataKeeperMockRecorder) CreateBill(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBill", reflect.TypeOf((*MockDataKeeper)(nil).CreateBill), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockDataKeeper) CreateOrder(arg0 context.Context, arg1 storage.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockDataKeeperMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockDataKeeper)(nil).CreateOrder), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockDataKeeper) CreateUser(arg0 context.Context, arg1 storage.AuthData) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDataKeeperMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDataKeeper)(nil).CreateUser), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockDataKeeper) GetUser(arg0 context.Context, arg1 int) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDataKeeperMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDataKeeper)(nil).GetUser), arg0, arg1)
}

// HealthCheck mocks base method.
func (m *MockDataKeeper) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockDataKeeperMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockDataKeeper)(nil).HealthCheck))
}

// LoginUser mocks base method.
func (m *MockDataKeeper) LoginUser(arg0 context.Context, arg1 storage.AuthData) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockDataKeeperMockRecorder) LoginUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockDataKeeper)(nil).LoginUser), arg0, arg1)
}

// ProcessingOrders mocks base method.
func (m *MockDataKeeper) ProcessingOrders(arg0 context.Context) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessingOrders", arg0)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessingOrders indicates an expected call of ProcessingOrders.
func (mr *MockDataKeeperMockRecorder) ProcessingOrders(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessingOrders", reflect.TypeOf((*MockDataKeeper)(nil).ProcessingOrders), arg0)
}

// UpdateOrder mocks base method.
func (m *MockDataKeeper) UpdateOrder(arg0 context.Context, arg1 storage.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockDataKeeperMockRecorder) UpdateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockDataKeeper)(nil).UpdateOrder), arg0, arg1)
}

// WithdrawFromBalance mocks base method.
func (m *MockDataKeeper) WithdrawFromBalance(arg0 context.Context, arg1 int, arg2 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFromBalance indicates an expected call of WithdrawFromBalance.
func (mr *MockDataKeeperMockRecorder) WithdrawFromBalance(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromBalance", reflect.TypeOf((*MockDataKeeper)(nil).WithdrawFromBalance), arg0, arg1, arg2)
}
